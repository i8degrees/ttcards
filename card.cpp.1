/******************************************************************************
    card.cpp

  Copyright (c) 2013 Jeffrey Carpenter

******************************************************************************/
#include "card.h"

using namespace std;

Card::Card (struct card_type)
{
  unsigned int id, level, type, element;
  unsigned int power0, power1, power2, power3;
  std::string name;
  std::string filename = NULL; // FIXME

  ifstream load ( "./data/cards.txt" );

  if ( ! load )
  {
    std::cout << "ERR: Input file " << filename << std::endl;
    exit ( EXIT_FAILURE );
  }

  for ( int i = 0; i < MAX_DECKSET; i++ )
  {
    load >> id;
    load >> level;
    load >> type;
    load >> element;
    load >> name;

    card = new Card ( card_type ( id, level, type, element, name ) );

    //pigshit.contents.push_back( card_type ( id , level, type, element, name ) );

    //std::cout <<  << pigshit.contents.back().name << "\n" << std::endl;

  }

  load.close ();
}

Card::~Card ( void )
{
  // ...
}

void Card::List ( void )
{

}

/*
bool Card::Load ( std::string filename )
{


  return true;
}
*/

Pile::Pile ( void )
{
  // ...

}

Pile::~Pile ( void )
{
  //
}

bool Pile::Init ( void )
{
  return true;
}

void Pile::List ( void )
{
  for ( int i = 0; i < MAX_DECKSET; i++ )
  {
    //std::cout << pile[i].id << " " << pile[i].level << " " << pile[i].type << " " << pile[i].element << " " << pile[i].power[0] << " " << pile[i].power[1] << " " << pile[i].power[2] << " " << pile[i].power[3] << " " << pile[i].name << std::endl;
  }
}

Hand::Hand ( void )
{
}

/*
bool Hand::Init ( Pile *deck )
{

  for ( int i = 0; i < MAX_CARDSET; i++ )
  {
    card.push_back ( Card ( deck->contents[i].id, deck->contents[i].level,
                            deck->contents[i].type, deck->contents[i].element,
                            deck->contents[i].power[0], deck->contents[i].power[1],
                            deck->contents[i].power[2], deck->contents[i].power[3],
                            deck->contents[i].name ) );
  }

  return true;
  //create ();
  //shuffle ();
}
*/

Hand::~Hand ( void )
{
  card.clear ();
}

void Hand::create ( void )
{

  for ( int i = 0; i < MAX_CARDSET; i++ )
  {
    //hand.push_back ( i );
  }
}

void Hand::shuffle ( void )
{
  for ( int i = MAX_CARDSET; i > 0; i-- )
  {
    //int swap_index = rand () % MAX_CARDSET;
    //int buffer = hand[i-1].id;
    //hand[i-1].id = hand[swap_index];
    //hand[swap_index] = buffer;
  }
}

void Hand::refill ( void )
{
  create ();
  shuffle ();
}

void Hand::list ( void )
{
  for ( int i = 0; i < MAX_CARDSET; i++ )
  {
    //std::cout << hand[i];
    //std::cout << card[i].id << " " << card[i].name << std::endl;
  }
}

