/******************************************************************************
    card.h

  Copyright (c) 2013 Jeffrey Carpenter

******************************************************************************/
#ifndef CARD_HEADERS
#define CARD_HEADERS

#include <iostream>
#include <fstream> // file streams
#include <vector>
#include <array>
#include <string>

#include "SDL.h"

#include "cfg.h"

class Card
{
  public:
    /*
    struct card_type {  card_type(  unsigned int id, unsigned int level,
                                    unsigned int type, unsigned int element,
                                    unsigned int power0, unsigned int power1,
                                    unsigned int power2, unsigned int power3,
                                    std::string name ):
                                    id{id}, level{level}, type{type},
                                    element{element}, power0{power0}, power1{power1},
                                    power2{power2}, power3{power3}, name{name}
                                    {}
                                    unsigned int id; unsigned int level;
                                    unsigned int type; unsigned int element;
                                    unsigned int power0; unsigned int power1;
                                    unsigned int power2; unsigned int power3;
                                    std::string name;
                      };
*/

                          struct card_type {  card_type(  unsigned int id, unsigned int level,
                                    unsigned int type, unsigned int element,

                                    std::string name ):
                                    id{id}, level{level}, type{type},
                                    element{element},
                                    name{name}
                                    {}
                                    unsigned int id; unsigned int level;
                                    unsigned int type; unsigned int element;

                                    std::string name;
                      };
  Card (struct card_type);
  ~Card ( void );
  void List ( void );
  //bool Load ( std::string filename );

  private:
    // ...
};

class Pile
{
  public:
    Pile ( void );
    ~Pile ( void );

    bool Init ( void );
    void List ( void );

    std::vector<Card::card_type> contents;
    Card *card;
};

class Hand {
  public:
    Hand ( void );
    ~Hand ( void );

    bool Init ( Pile *deck );

    void create ( void );
    void shuffle ( void );
    void list ( void );
    //next ( void );
    void refill ( void );
    //deal ( void );
    std::vector<Card> card;
};

typedef enum element_type {
  NONE=0, // type 0; reserved / debug
  EARTH=1, // type 1 element
  FIRE=2, // type 2 element
  HOLY=3, // type 3 element
  ICE=4, // type 4 element
  POISON=5, // type 5 element
  THUNDER=6, // type 6 element
  WATER=7, // type 7 element
  WIND=8 // type 8 element
  // TODO: cElement etype = { ICE }; std::cout << etype << endl;
} cElement, cEleType;

typedef enum category_type {
  MONSTER=1,
  BOSS=2,
  GF=3,
  PLAYER=4,
  LEVEL_1=1,
  LEVEL_2=2,
  LEVEL_3=3,
  LEVEL_4=4,
  LEVEL_5=5,
  LEVEL_6=6,
  LEVEL_7=7,
  LEVEL_8=8,
  LEVEL_9=9,
  LEVEL_10=10
  // TODO: cType cType = { LEVEL_4 }; std::cout << cType << "\n";
} cType, cat_type;

#endif // CARD_HEADERS defined
