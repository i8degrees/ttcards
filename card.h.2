/*
typedef struct card_typ {
      unsigned int id;
      unsigned int level;
      unsigned int type;
      unsigned int element;
      std::array<int, 4> power;
      std::string name;
} card_type;

struct card_type *cards;

  ctest->id = 0;
  test->level = 1;
  ctest->type = 1;
  ctest->element = 0;
  ctest->power = { 4, 8, 6, 10 };
  ctest->name = "Rawr!";
*/

#ifndef CARD_HEADERS
#define CARD_HEADERS

#include <iostream>
#include <fstream> // file streams
#include <vector>
#include <array>
#include <string>

#include "SDL.h"

#include "cfg.h"

/*
    Card (  int id, int level, int ctype, int element,
            int p1, int p2, int p3, int p4, std::string name);
*/

class Card
{
  public:
    Card ();
    ~Card ( void );

    struct card_type {  card_type(  unsigned int id, unsigned int level,
                                    unsigned int type, unsigned int element,
                                    std::array<int, 4> power, std::string name ):
                                    id{id}, level{level},
                                    type{type}, element{element},
                                    power{{4,6,9,0}}, name{name}
                         {}
      unsigned int id; unsigned int level; unsigned int type; unsigned int element;
      std::array<int, 4> power; std::string name;
    };

    //void Draw ( void );
  private:
    // ...
};

class Pile {
  public:
    Pile ( void );
    ~Pile ( void );

    bool Init ( void );
    bool Load_Cards ( std::string filename );
    void List ( void );

    std::vector<Card::card_type> contents;

};

class Hand {
  public:
    Hand ( void );
    ~Hand ( void );

    bool Init ( Pile *deck );

    void create ( void );
    void shuffle ( void );
    void list ( void );
    //next ( void );
    void refill ( void );
    //deal ( void );
    std::vector<Card> card;
};

typedef enum element_type {
  NONE=0, // type 0; reserved / debug
  EARTH=1, // type 1 element
  FIRE=2, // type 2 element
  HOLY=3, // type 3 element
  ICE=4, // type 4 element
  POISON=5, // type 5 element
  THUNDER=6, // type 6 element
  WATER=7, // type 7 element
  WIND=8 // type 8 element
  // TODO: cElement etype = { ICE }; std::cout << etype << endl;
} cElement, cEleType;

typedef enum category_type {
  MONSTER=1,
  BOSS=2,
  GF=3,
  PLAYER=4,
  LEVEL_1=1,
  LEVEL_2=2,
  LEVEL_3=3,
  LEVEL_4=4,
  LEVEL_5=5,
  LEVEL_6=6,
  LEVEL_7=7,
  LEVEL_8=8,
  LEVEL_9=9,
  LEVEL_10=10
  // TODO: cType cType = { LEVEL_4 }; std::cout << cType << "\n";
} cType, cat_type;

#endif // CARD_HEADERS defined
